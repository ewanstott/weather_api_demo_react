{"ast":null,"code":"var _jsxFileName = \"/Users/ewstott/Documents/Github_Local/weather_api_demo_react/src/App.js\";\nimport React, { Component } from \"react\";\nimport Spinner from \"./components/Spinner\";\nimport \"./App.css\";\nimport axios from \"axios\";\nimport Interface from \"./components/Interface\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\n\n//WRITE THIS OUT AGAIN\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    // state = {};\n    this.state = {\n      weather: null,\n      city: \"\" // Add a city property to the state\n    };\n  }\n  //ALLOWING USER TO SEARCH FOR CITY\n  // invoked immediately after a component is inserted into the DOM, making it suitable for performing actions such as data fetching or setting up subscriptions.\n  async get() {\n    const {\n      data\n    } = await axios.get(`https://api.openweathermap.org/data/2.5/weather?q=Vancouver,Canada&units=metric&appid=adef24c0d24a95065818997a98ddd457\n      `);\n    console.log(data);\n    //Use forecast URL\n    //https://api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&appid={API key}\n\n    this.setState({\n      weather: data\n    }); //store weather data in state above ^^\n  }\n\n  //COMPONENTDIDMOUNT - FOR INITIAL LOAD\n  // invoked immediately after a component is inserted into the DOM, making it suitable for performing actions such as data fetching or setting up subscriptions.\n  // async componentDidMount() {\n  //   const { data } = await axios.get(\n  //     `https://api.openweathermap.org/data/2.5/weather?q=Vancouver,Canada&units=metric&appid=adef24c0d24a95065818997a98ddd457\n  //     `\n  //   );\n  //   console.log(data);\n  //   //Use forecast URL\n  //   //https://api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&appid={API key}\n\n  //   this.setState({ weather: data }); //store weather data in state above ^^\n  // }\n\n  render() {\n    console.log(this.state);\n    //If there is weather (truthy), show weather, Otherwise, show spinner.\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), this.state.weather ? /*#__PURE__*/_jsxDEV(Interface, {\n        weather: this.state.weather\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this) //send weather into interface component (passing the weather property from the component's state (this.state.weather) as a prop to another component. It allows the child component to access and use the weather data from the parent component's state. )\n      : /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n}\nexport default App;\n\n//Notes\n// this.state refers to the internal state of a component, while this.props refers to the properties passed to a component. When you set the state using this.setState({...}), you're updating the internal state of the component.\n// When you pass data from a parent component to a child component, you use props. In React, props are a way to pass data from a parent component to a child component. When you pass data as a prop, it becomes accessible in the child component through this.props. It doesn't directly affect the state of the child component; instead, it provides a way for the child component to receive and use external data.\n// So, this.state is used to manage internal component state, and this.props is used to receive data passed down from a parent component. If you pass data from the state of a parent component to a child component, it will typically be done through props.","map":{"version":3,"names":["React","Component","Spinner","axios","Interface","Header","Footer","jsxDEV","_jsxDEV","Fragment","_Fragment","App","constructor","args","state","weather","city","get","data","console","log","setState","render","children","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/Users/ewstott/Documents/Github_Local/weather_api_demo_react/src/App.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport Spinner from \"./components/Spinner\";\nimport \"./App.css\";\nimport axios from \"axios\";\nimport Interface from \"./components/Interface\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\n\n//WRITE THIS OUT AGAIN\n\nclass App extends Component {\n  // state = {};\n  state = {\n    weather: null,\n    city: \"\", // Add a city property to the state\n  };\n\n  //ALLOWING USER TO SEARCH FOR CITY\n  // invoked immediately after a component is inserted into the DOM, making it suitable for performing actions such as data fetching or setting up subscriptions.\n  async get() {\n    const { data } = await axios.get(\n      `https://api.openweathermap.org/data/2.5/weather?q=Vancouver,Canada&units=metric&appid=adef24c0d24a95065818997a98ddd457\n      `\n    );\n    console.log(data);\n    //Use forecast URL\n    //https://api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&appid={API key}\n\n    this.setState({ weather: data }); //store weather data in state above ^^\n  }\n\n  //COMPONENTDIDMOUNT - FOR INITIAL LOAD\n  // invoked immediately after a component is inserted into the DOM, making it suitable for performing actions such as data fetching or setting up subscriptions.\n  // async componentDidMount() {\n  //   const { data } = await axios.get(\n  //     `https://api.openweathermap.org/data/2.5/weather?q=Vancouver,Canada&units=metric&appid=adef24c0d24a95065818997a98ddd457\n  //     `\n  //   );\n  //   console.log(data);\n  //   //Use forecast URL\n  //   //https://api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&appid={API key}\n\n  //   this.setState({ weather: data }); //store weather data in state above ^^\n  // }\n\n  render() {\n    console.log(this.state);\n    //If there is weather (truthy), show weather, Otherwise, show spinner.\n    return (\n      <>\n        <Header />\n        {this.state.weather ? (\n          <Interface weather={this.state.weather} /> //send weather into interface component (passing the weather property from the component's state (this.state.weather) as a prop to another component. It allows the child component to access and use the weather data from the parent component's state. )\n        ) : (\n          <Spinner />\n        )}\n        <Footer />\n      </>\n    );\n  }\n}\n\nexport default App;\n\n//Notes\n// this.state refers to the internal state of a component, while this.props refers to the properties passed to a component. When you set the state using this.setState({...}), you're updating the internal state of the component.\n// When you pass data from a parent component to a child component, you use props. In React, props are a way to pass data from a parent component to a child component. When you pass data as a prop, it becomes accessible in the child component through this.props. It doesn't directly affect the state of the child component; instead, it provides a way for the child component to receive and use external data.\n// So, this.state is used to manage internal component state, and this.props is used to receive data passed down from a parent component. If you pass data from the state of a parent component to a child component, it will typically be done through props.\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,OAAO,MAAM,sBAAsB;AAC1C,OAAO,WAAW;AAClB,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,wBAAwB;AAC9C,OAAO,kCAAkC;AACzC,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAOC,MAAM,MAAM,qBAAqB;;AAExC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEA,MAAMC,GAAG,SAASV,SAAS,CAAC;EAAAW,YAAA,GAAAC,IAAA;IAAA,SAAAA,IAAA;IAC1B;IAAA,KACAC,KAAK,GAAG;MACNC,OAAO,EAAE,IAAI;MACbC,IAAI,EAAE,EAAE,CAAE;IACZ,CAAC;EAAA;EAED;EACA;EACA,MAAMC,GAAGA,CAAA,EAAG;IACV,MAAM;MAAEC;IAAK,CAAC,GAAG,MAAMf,KAAK,CAACc,GAAG,CAC7B;AACP,OACI,CAAC;IACDE,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;IACjB;IACA;;IAEA,IAAI,CAACG,QAAQ,CAAC;MAAEN,OAAO,EAAEG;IAAK,CAAC,CAAC,CAAC,CAAC;EACpC;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEAI,MAAMA,CAAA,EAAG;IACPH,OAAO,CAACC,GAAG,CAAC,IAAI,CAACN,KAAK,CAAC;IACvB;IACA,oBACEN,OAAA,CAAAE,SAAA;MAAAa,QAAA,gBACEf,OAAA,CAACH,MAAM;QAAAmB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,EACT,IAAI,CAACb,KAAK,CAACC,OAAO,gBACjBP,OAAA,CAACJ,SAAS;QAACW,OAAO,EAAE,IAAI,CAACD,KAAK,CAACC;MAAQ;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,CAAC;MAAA,eAE3CnB,OAAA,CAACN,OAAO;QAAAsB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CACX,eACDnB,OAAA,CAACF,MAAM;QAAAkB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA,eACV,CAAC;EAEP;AACF;AAEA,eAAehB,GAAG;;AAElB;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}