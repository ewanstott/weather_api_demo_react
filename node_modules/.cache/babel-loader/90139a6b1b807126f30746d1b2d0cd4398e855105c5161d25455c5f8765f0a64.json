{"ast":null,"code":"var _jsxFileName = \"/Users/ewstott/Documents/Github_Local/weather_api_demo_react/src/components/Interface.jsx\";\nimport React, { Component } from \"react\";\nimport Button from \"./Button\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nclass Interface extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      city: \"\",\n      weather: null\n    };\n    this.onInput = e => {\n      this.setState({\n        city: e.target.value\n      });\n      console.log(e.target.value);\n    };\n    this.onGetWeatherClick = () => {\n      // this.setState(city);\n      // const { city } = this.props\n      // Call the function passed from the parent component\n      // console.log(onGetWeatherClick);\n      // this.props.getWeatherData(this.state.city);\n    };\n  }\n  render() {\n    const {\n      weather\n    } = this.props;\n    // console.log(this.props);\n    console.log(this.state);\n    // console.log(weather);\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter city name\",\n        value: this.state.city,\n        onChange: this.onInput\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.onGetWeatherClick,\n        children: \"Get Weather\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: [\"Location: \", weather.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Temperature: \", weather.main.temp, \"\\xB0C\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Feels like: \", weather.main.feels_like, \"\\xB0C\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Description: \", weather.weather[0].main]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 11\n        }, this)\n      }, void 0, false)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default Interface;\n\n//Go through Todo demo again\n\n//Map over API URL and spit out HTML\n//Make components\n//Add button that sorts weather\n//HW to include:\n// - Components\n// - Props\n// - State\n// - Life cycles\n// // - Event handling\n// Components: In React, components are modular, reusable building blocks that encapsulate a part of the user interface and its behavior.\n\n// Props: Props (short for properties) are used to pass data from a parent component to a child component in React, allowing communication between them.\n\n// State: State is a mechanism in React components that allows them to manage and maintain their own data, ensuring that the UI reflects the current application state.\n\n// Life Cycles: Component lifecycle methods in React provide hooks at various stages, such as mounting, updating, and unmounting, allowing developers to execute code at specific points in a component's existence.\n\n// Event Handling: In React, event handling involves capturing and responding to user interactions (e.g., clicks, input changes) within the components to trigger specific actions or updates in the application.\n\n{\n  /* {weather.map((weatherItem, index) => (\n          <p key={index}>{weatherItem}</p>\n        ))}; */\n}\n\n// <div>\n// <form onSubmit={handleSubmit}>\n//         <input\n//           type=\"text\"\n//           placeholder=\"Enter city name\"\n//           value={city}\n//           onChange={inputChange}\n//         />\n//         <button type=\"submit\">Get Weather</button>\n//       </form>\n// <div/>","map":{"version":3,"names":["React","Component","Button","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","Interface","constructor","args","state","city","weather","onInput","e","setState","target","value","console","log","onGetWeatherClick","render","props","children","type","placeholder","onChange","fileName","_jsxFileName","lineNumber","columnNumber","onClick","className","name","main","temp","feels_like"],"sources":["/Users/ewstott/Documents/Github_Local/weather_api_demo_react/src/components/Interface.jsx"],"sourcesContent":["import React, { Component } from \"react\";\nimport Button from \"./Button\";\nimport axios from \"axios\";\n\nclass Interface extends Component {\n  state = { city: \"\", weather: null };\n\n  onInput = (e) => {\n    this.setState({ city: e.target.value });\n    console.log(e.target.value);\n  };\n\n  onGetWeatherClick = () => {\n    // this.setState(city);\n    // const { city } = this.props\n    // Call the function passed from the parent component\n    // console.log(onGetWeatherClick);\n    // this.props.getWeatherData(this.state.city);\n  };\n\n  render() {\n    const { weather } = this.props;\n    // console.log(this.props);\n    console.log(this.state);\n    // console.log(weather);\n\n    return (\n      <div>\n        <input\n          type=\"text\"\n          placeholder=\"Enter city name\"\n          value={this.state.city}\n          onChange={this.onInput}\n        />\n        <button onClick={this.onGetWeatherClick}>Get Weather</button>\n        <>\n          <div className=\"card\">\n            <h2>Location: {weather.name}</h2>\n            <p>Temperature: {weather.main.temp}°C</p>\n            <p>Feels like: {weather.main.feels_like}°C</p>\n            <p>Description: {weather.weather[0].main}</p>\n            {/* <>\n              <Button text={\"Refresh\"} className=\"refreshBtn\" />\n            </> */}\n          </div>\n        </>\n      </div>\n    );\n  }\n}\n\nexport default Interface;\n\n//Go through Todo demo again\n\n//Map over API URL and spit out HTML\n//Make components\n//Add button that sorts weather\n//HW to include:\n// - Components\n// - Props\n// - State\n// - Life cycles\n// // - Event handling\n// Components: In React, components are modular, reusable building blocks that encapsulate a part of the user interface and its behavior.\n\n// Props: Props (short for properties) are used to pass data from a parent component to a child component in React, allowing communication between them.\n\n// State: State is a mechanism in React components that allows them to manage and maintain their own data, ensuring that the UI reflects the current application state.\n\n// Life Cycles: Component lifecycle methods in React provide hooks at various stages, such as mounting, updating, and unmounting, allowing developers to execute code at specific points in a component's existence.\n\n// Event Handling: In React, event handling involves capturing and responding to user interactions (e.g., clicks, input changes) within the components to trigger specific actions or updates in the application.\n\n{\n  /* {weather.map((weatherItem, index) => (\n          <p key={index}>{weatherItem}</p>\n        ))}; */\n}\n\n// <div>\n// <form onSubmit={handleSubmit}>\n//         <input\n//           type=\"text\"\n//           placeholder=\"Enter city name\"\n//           value={city}\n//           onChange={inputChange}\n//         />\n//         <button type=\"submit\">Get Weather</button>\n//       </form>\n// <div/>\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE1B,MAAMC,SAAS,SAASP,SAAS,CAAC;EAAAQ,YAAA,GAAAC,IAAA;IAAA,SAAAA,IAAA;IAAA,KAChCC,KAAK,GAAG;MAAEC,IAAI,EAAE,EAAE;MAAEC,OAAO,EAAE;IAAK,CAAC;IAAA,KAEnCC,OAAO,GAAIC,CAAC,IAAK;MACf,IAAI,CAACC,QAAQ,CAAC;QAAEJ,IAAI,EAAEG,CAAC,CAACE,MAAM,CAACC;MAAM,CAAC,CAAC;MACvCC,OAAO,CAACC,GAAG,CAACL,CAAC,CAACE,MAAM,CAACC,KAAK,CAAC;IAC7B,CAAC;IAAA,KAEDG,iBAAiB,GAAG,MAAM;MACxB;MACA;MACA;MACA;MACA;IAAA,CACD;EAAA;EAEDC,MAAMA,CAAA,EAAG;IACP,MAAM;MAAET;IAAQ,CAAC,GAAG,IAAI,CAACU,KAAK;IAC9B;IACAJ,OAAO,CAACC,GAAG,CAAC,IAAI,CAACT,KAAK,CAAC;IACvB;;IAEA,oBACEN,OAAA;MAAAmB,QAAA,gBACEnB,OAAA;QACEoB,IAAI,EAAC,MAAM;QACXC,WAAW,EAAC,iBAAiB;QAC7BR,KAAK,EAAE,IAAI,CAACP,KAAK,CAACC,IAAK;QACvBe,QAAQ,EAAE,IAAI,CAACb;MAAQ;QAAAc,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACxB,CAAC,eACF1B,OAAA;QAAQ2B,OAAO,EAAE,IAAI,CAACX,iBAAkB;QAAAG,QAAA,EAAC;MAAW;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAC7D1B,OAAA,CAAAE,SAAA;QAAAiB,QAAA,eACEnB,OAAA;UAAK4B,SAAS,EAAC,MAAM;UAAAT,QAAA,gBACnBnB,OAAA;YAAAmB,QAAA,GAAI,YAAU,EAACX,OAAO,CAACqB,IAAI;UAAA;YAAAN,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eACjC1B,OAAA;YAAAmB,QAAA,GAAG,eAAa,EAACX,OAAO,CAACsB,IAAI,CAACC,IAAI,EAAC,OAAE;UAAA;YAAAR,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG,CAAC,eACzC1B,OAAA;YAAAmB,QAAA,GAAG,cAAY,EAACX,OAAO,CAACsB,IAAI,CAACE,UAAU,EAAC,OAAE;UAAA;YAAAT,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG,CAAC,eAC9C1B,OAAA;YAAAmB,QAAA,GAAG,eAAa,EAACX,OAAO,CAACA,OAAO,CAAC,CAAC,CAAC,CAACsB,IAAI;UAAA;YAAAP,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAI1C;MAAC,gBACN,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAEV;AACF;AAEA,eAAevB,SAAS;;AAExB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;EACE;AACF;AACA;AAFE;;AAKF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}