{"ast":null,"code":"var _jsxFileName = \"/Users/ewstott/Documents/Github_Local/weather_api_demo_react/src/components/Interface.jsx\";\nimport React, { Component } from \"react\";\nimport Button from \"./Button\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nclass Interface extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      city: \"\",\n      weather: null\n    };\n    this.onInput = e => {\n      this.setState({\n        city: e.target.value\n      });\n      console.log(e.target.value);\n    };\n    this.onGetWeatherClick = async () => {\n      // this.setState(city);\n      // const { city } = this.props\n      try {\n        const {\n          data\n        } = await axios.get(`https://api.openweathermap.org/data/2.5/weather?q=${this.state.city}&units=metric&appid=adef24c0d24a95065818997a98ddd457\n        `);\n        this.setState({\n          weather: data\n        }); //store weather data in state above ^^\n      } catch (error) {\n        console.log(error);\n      }\n    };\n  }\n  render() {\n    const {\n      weather\n    } = this.props;\n    // console.log(this.props);\n    console.log(this.state);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter city name\"\n        // value={city}\n        ,\n        onInput: this.onInput\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.onGetWeatherClick,\n        children: \"Get Weather\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: [\"Location: \", weather.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Temperature: \", weather.main.temp]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Feels like: \", weather.main.feels_like]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Description: \", weather.weather[0].main]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              text: \"Refresh\",\n              className: \"refreshBtn\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 15\n            }, this)\n          }, void 0, false)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, this)\n      }, void 0, false)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default Interface;\n\n//Go through Todo demo again\n\n//Map over API URL and spit out HTML\n//Make components\n//Add button that sorts weather\n//HW to include:\n// - Components\n// - Props\n// - State\n// - Life cycles\n// // - Event handling\n// Components: In React, components are modular, reusable building blocks that encapsulate a part of the user interface and its behavior.\n\n// Props: Props (short for properties) are used to pass data from a parent component to a child component in React, allowing communication between them.\n\n// State: State is a mechanism in React components that allows them to manage and maintain their own data, ensuring that the UI reflects the current application state.\n\n// Life Cycles: Component lifecycle methods in React provide hooks at various stages, such as mounting, updating, and unmounting, allowing developers to execute code at specific points in a component's existence.\n\n// Event Handling: In React, event handling involves capturing and responding to user interactions (e.g., clicks, input changes) within the components to trigger specific actions or updates in the application.\n\n{\n  /* {weather.map((weatherItem, index) => (\n          <p key={index}>{weatherItem}</p>\n        ))}; */\n}\n\n// <div>\n// <form onSubmit={handleSubmit}>\n//         <input\n//           type=\"text\"\n//           placeholder=\"Enter city name\"\n//           value={city}\n//           onChange={inputChange}\n//         />\n//         <button type=\"submit\">Get Weather</button>\n//       </form>\n// <div/>","map":{"version":3,"names":["React","Component","Button","jsxDEV","_jsxDEV","Fragment","_Fragment","Interface","constructor","args","state","city","weather","onInput","e","setState","target","value","console","log","onGetWeatherClick","data","axios","get","error","render","props","children","type","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","onClick","className","name","main","temp","feels_like","text"],"sources":["/Users/ewstott/Documents/Github_Local/weather_api_demo_react/src/components/Interface.jsx"],"sourcesContent":["import React, { Component } from \"react\";\nimport Button from \"./Button\";\n\nclass Interface extends Component {\n  state = { city: \"\", weather: null };\n\n  onInput = (e) => {\n    this.setState({ city: e.target.value });\n    console.log(e.target.value);\n  };\n\n  onGetWeatherClick = async () => {\n    // this.setState(city);\n    // const { city } = this.props\n    try {\n      const { data } = await axios.get(\n        `https://api.openweathermap.org/data/2.5/weather?q=${this.state.city}&units=metric&appid=adef24c0d24a95065818997a98ddd457\n        `\n      );\n\n      this.setState({ weather: data }); //store weather data in state above ^^\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  render() {\n    const { weather } = this.props;\n    // console.log(this.props);\n    console.log(this.state);\n\n    return (\n      <div>\n        <input\n          type=\"text\"\n          placeholder=\"Enter city name\"\n          // value={city}\n          onInput={this.onInput}\n        />\n        <button onClick={this.onGetWeatherClick}>Get Weather</button>\n        <>\n          <div className=\"card\">\n            <h2>Location: {weather.name}</h2>\n            <p>Temperature: {weather.main.temp}</p>\n            <p>Feels like: {weather.main.feels_like}</p>\n            <p>Description: {weather.weather[0].main}</p>\n            <>\n              <Button text={\"Refresh\"} className=\"refreshBtn\" />\n            </>\n          </div>\n        </>\n      </div>\n    );\n  }\n}\n\nexport default Interface;\n\n//Go through Todo demo again\n\n//Map over API URL and spit out HTML\n//Make components\n//Add button that sorts weather\n//HW to include:\n// - Components\n// - Props\n// - State\n// - Life cycles\n// // - Event handling\n// Components: In React, components are modular, reusable building blocks that encapsulate a part of the user interface and its behavior.\n\n// Props: Props (short for properties) are used to pass data from a parent component to a child component in React, allowing communication between them.\n\n// State: State is a mechanism in React components that allows them to manage and maintain their own data, ensuring that the UI reflects the current application state.\n\n// Life Cycles: Component lifecycle methods in React provide hooks at various stages, such as mounting, updating, and unmounting, allowing developers to execute code at specific points in a component's existence.\n\n// Event Handling: In React, event handling involves capturing and responding to user interactions (e.g., clicks, input changes) within the components to trigger specific actions or updates in the application.\n\n{\n  /* {weather.map((weatherItem, index) => (\n          <p key={index}>{weatherItem}</p>\n        ))}; */\n}\n\n// <div>\n// <form onSubmit={handleSubmit}>\n//         <input\n//           type=\"text\"\n//           placeholder=\"Enter city name\"\n//           value={city}\n//           onChange={inputChange}\n//         />\n//         <button type=\"submit\">Get Weather</button>\n//       </form>\n// <div/>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}