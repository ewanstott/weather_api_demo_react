{"ast":null,"code":"var _jsxFileName = \"/Users/ewstott/Documents/Github_Local/weather_api_demo_react/src/components/Interface.jsx\";\nimport React, { Component } from \"react\";\nimport Button from \"./Button\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nclass Interface extends Component {\n  // state = {}\n  render() {\n    const {\n      weather\n    } = this.props;\n    console.log(this.props);\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [weather.map((weatherItem, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n        children: weatherItem.name\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 11\n      }, this)), \";\"]\n    }, void 0, true)\n    // <>\n    //   <div className=\"card\">\n    //     <h2>Location: {weather.name}</h2>\n    //     <p>Temperature: {weather.main.temp}</p>\n    //     <p>Feels like: {weather.main.feels_like}</p>\n    //     <p>Description: {weather.weather[0].main}</p>\n    //     <>\n    //       <Button text={\"Refresh\"} className=\"refreshBtn\" />\n    //     </>\n    //   </div>\n    // </>\n    ;\n  }\n}\nexport default Interface;\n\n//Go through Todo demo again\n\n//Map over API URL and spit out HTML\n//Make components\n//Add button that sorts weather\n//HW to include:\n// - Components\n// - Props\n// - State\n// - Life cycles\n// // - Event handling\n// Components: In React, components are modular, reusable building blocks that encapsulate a part of the user interface and its behavior.\n\n// Props: Props (short for properties) are used to pass data from a parent component to a child component in React, allowing communication between them.\n\n// State: State is a mechanism in React components that allows them to manage and maintain their own data, ensuring that the UI reflects the current application state.\n\n// Life Cycles: Component lifecycle methods in React provide hooks at various stages, such as mounting, updating, and unmounting, allowing developers to execute code at specific points in a component's existence.\n\n// Event Handling: In React, event handling involves capturing and responding to user interactions (e.g., clicks, input changes) within the components to trigger specific actions or updates in the application.","map":{"version":3,"names":["React","Component","Button","jsxDEV","_jsxDEV","Fragment","_Fragment","Interface","render","weather","props","console","log","children","map","weatherItem","index","name","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/Users/ewstott/Documents/Github_Local/weather_api_demo_react/src/components/Interface.jsx"],"sourcesContent":["import React, { Component } from \"react\";\nimport Button from \"./Button\";\n\nclass Interface extends Component {\n  // state = {}\n  render() {\n    const { weather } = this.props;\n    console.log(this.props);\n    return (\n      <>\n        {weather.map((weatherItem, index) => (\n          <p key={index}>{weatherItem.name}</p>\n        ))}\n        ;\n      </>\n      // <>\n      //   <div className=\"card\">\n      //     <h2>Location: {weather.name}</h2>\n      //     <p>Temperature: {weather.main.temp}</p>\n      //     <p>Feels like: {weather.main.feels_like}</p>\n      //     <p>Description: {weather.weather[0].main}</p>\n      //     <>\n      //       <Button text={\"Refresh\"} className=\"refreshBtn\" />\n      //     </>\n      //   </div>\n      // </>\n    );\n  }\n}\n\nexport default Interface;\n\n//Go through Todo demo again\n\n//Map over API URL and spit out HTML\n//Make components\n//Add button that sorts weather\n//HW to include:\n// - Components\n// - Props\n// - State\n// - Life cycles\n// // - Event handling\n// Components: In React, components are modular, reusable building blocks that encapsulate a part of the user interface and its behavior.\n\n// Props: Props (short for properties) are used to pass data from a parent component to a child component in React, allowing communication between them.\n\n// State: State is a mechanism in React components that allows them to manage and maintain their own data, ensuring that the UI reflects the current application state.\n\n// Life Cycles: Component lifecycle methods in React provide hooks at various stages, such as mounting, updating, and unmounting, allowing developers to execute code at specific points in a component's existence.\n\n// Event Handling: In React, event handling involves capturing and responding to user interactions (e.g., clicks, input changes) within the components to trigger specific actions or updates in the application.\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,MAAM,MAAM,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE9B,MAAMC,SAAS,SAASN,SAAS,CAAC;EAChC;EACAO,MAAMA,CAAA,EAAG;IACP,MAAM;MAAEC;IAAQ,CAAC,GAAG,IAAI,CAACC,KAAK;IAC9BC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACF,KAAK,CAAC;IACvB,oBACEN,OAAA,CAAAE,SAAA;MAAAO,QAAA,GACGJ,OAAO,CAACK,GAAG,CAAC,CAACC,WAAW,EAAEC,KAAK,kBAC9BZ,OAAA;QAAAS,QAAA,EAAgBE,WAAW,CAACE;MAAI,GAAxBD,KAAK;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAuB,CACrC,CAAC,EAAC,GAEL;IAAA,eAAE;IACF;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAAA;EAEJ;AACF;AAEA,eAAed,SAAS;;AAExB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}