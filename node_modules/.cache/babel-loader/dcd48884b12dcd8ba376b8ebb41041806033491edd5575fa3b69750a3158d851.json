{"ast":null,"code":"var _jsxFileName = \"/Users/ewstott/Documents/Github_Local/weather_api_demo_react/src/components/Interface.jsx\";\nimport React, { Component } from \"react\";\nimport Button from \"./Button\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nclass Interface extends Component {\n  // state = {}\n\n  render() {\n    const {\n      weather\n    } = this.props;\n    console.log(this.props);\n    inputField = e => {\n      console.log(e.target.value);\n    };\n    return (\n      /*#__PURE__*/\n      // <div>\n      // <form onSubmit={handleSubmit}>\n      //         <input\n      //           type=\"text\"\n      //           placeholder=\"Enter city name\"\n      //           value={city}\n      //           onChange={inputChange}\n      //         />\n      //         <button type=\"submit\">Get Weather</button>\n      //       </form>\n      // <div/>\n      _jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: [\"Location: \", weather.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Temperature: \", weather.main.temp]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Feels like: \", weather.main.feels_like]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Description: \", weather.weather[0].main]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              text: \"Refresh\",\n              className: \"refreshBtn\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 35,\n              columnNumber: 13\n            }, this)\n          }, void 0, false)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 9\n        }, this)\n      }, void 0, false)\n    );\n  }\n}\nexport default Interface;\n\n//Go through Todo demo again\n\n//Map over API URL and spit out HTML\n//Make components\n//Add button that sorts weather\n//HW to include:\n// - Components\n// - Props\n// - State\n// - Life cycles\n// // - Event handling\n// Components: In React, components are modular, reusable building blocks that encapsulate a part of the user interface and its behavior.\n\n// Props: Props (short for properties) are used to pass data from a parent component to a child component in React, allowing communication between them.\n\n// State: State is a mechanism in React components that allows them to manage and maintain their own data, ensuring that the UI reflects the current application state.\n\n// Life Cycles: Component lifecycle methods in React provide hooks at various stages, such as mounting, updating, and unmounting, allowing developers to execute code at specific points in a component's existence.\n\n// Event Handling: In React, event handling involves capturing and responding to user interactions (e.g., clicks, input changes) within the components to trigger specific actions or updates in the application.\n\n{\n  /* {weather.map((weatherItem, index) => (\n          <p key={index}>{weatherItem}</p>\n        ))}; */\n}","map":{"version":3,"names":["React","Component","Button","jsxDEV","_jsxDEV","Fragment","_Fragment","Interface","render","weather","props","console","log","inputField","e","target","value","children","className","name","fileName","_jsxFileName","lineNumber","columnNumber","main","temp","feels_like","text"],"sources":["/Users/ewstott/Documents/Github_Local/weather_api_demo_react/src/components/Interface.jsx"],"sourcesContent":["import React, { Component } from \"react\";\nimport Button from \"./Button\";\n\nclass Interface extends Component {\n  // state = {}\n\n  render() {\n    const { weather } = this.props;\n    console.log(this.props);\n\n    inputField = (e) => {\n      console.log(e.target.value);\n    };\n\n    return (\n      // <div>\n      // <form onSubmit={handleSubmit}>\n      //         <input\n      //           type=\"text\"\n      //           placeholder=\"Enter city name\"\n      //           value={city}\n      //           onChange={inputChange}\n      //         />\n      //         <button type=\"submit\">Get Weather</button>\n      //       </form>\n      // <div/>\n\n      <>\n        <div className=\"card\">\n          <h2>Location: {weather.name}</h2>\n          <p>Temperature: {weather.main.temp}</p>\n          <p>Feels like: {weather.main.feels_like}</p>\n          <p>Description: {weather.weather[0].main}</p>\n          <>\n            <Button text={\"Refresh\"} className=\"refreshBtn\" />\n          </>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default Interface;\n\n//Go through Todo demo again\n\n//Map over API URL and spit out HTML\n//Make components\n//Add button that sorts weather\n//HW to include:\n// - Components\n// - Props\n// - State\n// - Life cycles\n// // - Event handling\n// Components: In React, components are modular, reusable building blocks that encapsulate a part of the user interface and its behavior.\n\n// Props: Props (short for properties) are used to pass data from a parent component to a child component in React, allowing communication between them.\n\n// State: State is a mechanism in React components that allows them to manage and maintain their own data, ensuring that the UI reflects the current application state.\n\n// Life Cycles: Component lifecycle methods in React provide hooks at various stages, such as mounting, updating, and unmounting, allowing developers to execute code at specific points in a component's existence.\n\n// Event Handling: In React, event handling involves capturing and responding to user interactions (e.g., clicks, input changes) within the components to trigger specific actions or updates in the application.\n\n{\n  /* {weather.map((weatherItem, index) => (\n          <p key={index}>{weatherItem}</p>\n        ))}; */\n}\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,MAAM,MAAM,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE9B,MAAMC,SAAS,SAASN,SAAS,CAAC;EAChC;;EAEAO,MAAMA,CAAA,EAAG;IACP,MAAM;MAAEC;IAAQ,CAAC,GAAG,IAAI,CAACC,KAAK;IAC9BC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACF,KAAK,CAAC;IAEvBG,UAAU,GAAIC,CAAC,IAAK;MAClBH,OAAO,CAACC,GAAG,CAACE,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;IAC7B,CAAC;IAED;MAAA;MACE;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MAEAZ,OAAA,CAAAE,SAAA;QAAAW,QAAA,eACEb,OAAA;UAAKc,SAAS,EAAC,MAAM;UAAAD,QAAA,gBACnBb,OAAA;YAAAa,QAAA,GAAI,YAAU,EAACR,OAAO,CAACU,IAAI;UAAA;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eACjCnB,OAAA;YAAAa,QAAA,GAAG,eAAa,EAACR,OAAO,CAACe,IAAI,CAACC,IAAI;UAAA;YAAAL,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACvCnB,OAAA;YAAAa,QAAA,GAAG,cAAY,EAACR,OAAO,CAACe,IAAI,CAACE,UAAU;UAAA;YAAAN,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAC5CnB,OAAA;YAAAa,QAAA,GAAG,eAAa,EAACR,OAAO,CAACA,OAAO,CAAC,CAAC,CAAC,CAACe,IAAI;UAAA;YAAAJ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAC7CnB,OAAA,CAAAE,SAAA;YAAAW,QAAA,eACEb,OAAA,CAACF,MAAM;cAACyB,IAAI,EAAE,SAAU;cAACT,SAAS,EAAC;YAAY;cAAAE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE;UAAC,gBAClD,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACA;MAAC,gBACN;IAAC;EAEP;AACF;AAEA,eAAehB,SAAS;;AAExB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;EACE;AACF;AACA;AAFE"},"metadata":{},"sourceType":"module","externalDependencies":[]}